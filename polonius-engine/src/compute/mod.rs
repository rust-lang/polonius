//! The available Polonius computations.
//!
//! To run, combine them into a valid [`Pipeline`](crate::Pipeline).

use crate::{Dump, FactTypes};

/// A Polonius computation. Given an input, computes some output.
pub trait Computation<T: FactTypes> {
    /// The inputs required by a computation.
    ///
    /// Must implement [`db::LoadFrom`](crate::db::LoadFrom).
    type Input<'db>;

    /// The outputs generated by a computation.
    ///
    /// Must implement [`db::StoreTo`](crate::db::StoreTo).
    type Output;

    /// Performs the computation, returning the specified outputs.
    fn compute(&self, input: Self::Input<'_>, dump: &mut Dump<'_>) -> Self::Output;
}

input! {
    BorrowckInput {
        cfg_edge,
        origin_live_on_entry,
        loan_invalidated_at,
        subset_base,
        loan_issued_at,
        loan_killed_at,
        placeholder,
        known_placeholder_subset,
    }
}

output! {
    BorrowckErrors {
        errors,
        subset_errors,
    }
}

mod cfg;
mod initialization;
mod liveness;
mod location_insensitive;
mod naive;
mod optimized;
mod placeholder;

pub use self::cfg::Cfg;
pub use self::initialization::{MaybeInit, MaybeUninit, MoveError, Paths, VarDroppedWhileInit};
pub use self::liveness::LiveOrigins;
pub use self::location_insensitive::{
    BorrowckLocationInsensitive, BorrowckLocationInsensitiveAsSensitive,
};
pub use self::naive::BorrowckNaive;
pub use self::optimized::BorrowckOptimized;
pub use self::placeholder::{KnownPlaceholder, KnownPlaceholderLoans};
